{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrateur\\\\Desktop\\\\Octogames-Squadro-feat-3-prototype-squadro\\\\root\\\\client\\\\src\\\\components\\\\Plateau.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../style/Plateau.css';\nimport PionJaune from './Pion Jaune';\nimport PionRouge from './Pion Rouge';\nimport { ReactComponent as Board } from \"@svgr/webpack?-svgo,+titleProp,+ref!../assets/Plateau.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Plateau = () => {\n  _s();\n\n  const [board, setBoard] = useState([['x', 'y', 'y', 'y', 'y', 'y', 'x'], ['r', '+', '+', '+', '+', '+', '—'], ['r', '+', '+', '+', '+', '+', '—'], ['r', '+', '+', '+', '+', '+', '—'], ['r', '+', '+', '+', '+', '+', '—'], ['r', '+', '+', '+', '+', '+', '—'], ['x', '|', '|', '|', '|', '|', 'x']]);\n  const [yellows, setYellows] = useState([{\n    id: 1,\n    x: 0,\n    y: 1,\n    powerGo: 1,\n    powerReturn: -3\n  }, {\n    id: 2,\n    x: 0,\n    y: 2,\n    powerGo: 3,\n    powerReturn: -1\n  }, {\n    id: 3,\n    x: 0,\n    y: 3,\n    powerGo: 2,\n    powerReturn: -2\n  }, {\n    id: 4,\n    x: 0,\n    y: 4,\n    powerGo: 3,\n    powerReturn: -1\n  }, {\n    id: 5,\n    x: 0,\n    y: 5,\n    powerGo: 1,\n    powerReturn: -3\n  }]);\n  const [reds, setReds] = useState([{\n    id: 1,\n    x: 1,\n    y: 0,\n    powerGo: 3,\n    powerReturn: -1\n  }, {\n    id: 2,\n    x: 2,\n    y: 0,\n    powerGo: 1,\n    powerReturn: -3\n  }, {\n    id: 3,\n    x: 3,\n    y: 0,\n    powerGo: 2,\n    powerReturn: -2\n  }, {\n    id: 4,\n    x: 4,\n    y: 0,\n    powerGo: 1,\n    powerReturn: -3\n  }, {\n    id: 5,\n    x: 5,\n    y: 0,\n    powerGo: 3,\n    powerReturn: -1\n  }]);\n  const [score, setScore] = useState([0, 0]);\n  /* const [turn, setTurn] = useState('y') */\n\n  const replaceRedPawn = list => {\n    const newReds = [...reds];\n    list.forEach(x => {\n      const [powerGo, powerReturn, origin] = [newReds[x - 1].powerGo, newReds[x - 1].powerReturn, board[newReds[x - 1].x][0]];\n      delete newReds[x - 1];\n      newReds[x - 1] = {\n        id: Date.now() + x,\n        x: x,\n        y: origin === 'r' ? 0 : 6,\n        powerGo: powerGo,\n        powerReturn: powerReturn\n      };\n    });\n    setReds(newReds);\n  };\n\n  const replaceYellowPawn = list => {\n    const newYellows = [...yellows];\n    list.forEach(y => {\n      const [powerGo, powerReturn, origin] = [newYellows[y - 1].powerGo, newYellows[y - 1].powerReturn, board[0][newYellows[y - 1].y]];\n      delete newYellows[y - 1];\n      newYellows[y - 1] = {\n        id: Date.now() + y,\n        x: origin === 'y' ? 0 : 6,\n        y: y,\n        powerGo: powerGo,\n        powerReturn: powerReturn\n      };\n    });\n    setYellows(newYellows);\n  };\n\n  const updateYellows = (x, y) => {\n    const newYellows = [...yellows];\n    newYellows[y - 1].x = x;\n    setYellows(newYellows);\n  };\n\n  const updateReds = (x, y) => {\n    const newReds = [...reds];\n    newReds[x - 1].y = y;\n    setReds(newReds);\n  };\n\n  const handleRedPlay = (x, y, power) => {\n    const currBoard = [...board]; // Liste contenant les pions éliminés lors du tour\n\n    const deadPawn = []; // Etat actuel du pion dans la matrice, en aller ou en retour\n\n    const state = currBoard[x][y]; // On vérifie que le déplacement n'engendre pas un dépassement des limites du plateau\n\n    let distance = y + power >= 6 ? 6 - y : y + power <= 0 ? 0 - y : power;\n    let i;\n    /*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne dépend de la valeur de power, si on est en aller ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */\n\n    for (i = y; power > 0 ? i <= y + distance : i >= y + distance; power > 0 ? i++ : i--) {\n      // Si un pion Jaune est rencontré, retour à la case départ et incrémentation de la distance\n      if (i < 6 && currBoard[x][i].toLowerCase() === 'y') {\n        distance = power > 0 ? distance + 1 : distance - 1;\n        deadPawn.push(i);\n        currBoard[currBoard[x][i] === 'y' ? 0 : 6][i] = currBoard[x][i];\n        currBoard[x][i] = '+';\n      }\n    } // Si dépassement imprévu, on replace le pion aux bordures du plateau\n\n\n    const res = power > 0 ? i > 6 ? 6 : i - 1 : i < 0 ? 0 : i + 1;\n    replaceYellowPawn(deadPawn);\n    if (res === 6) currBoard[x][res] = 'R';else currBoard[x][res] = state; // Si un aller-retour complet réalisé, incrémentation du score\n\n    if (res === 0 && power < 0) {\n      const newScore = [...score];\n      newScore[0]++;\n      console.log('%cPion Rouge n°' + x + ' a fait un aller-retour complet ! +1 point pour les Rouges !', 'color: green');\n      setScore(newScore);\n      return 0;\n    } // Si le pion a quitté une bordure de sa ligne/colonne\n\n\n    if (y === 0 || y === 6) currBoard[x][y] = '—';else currBoard[x][y] = '+';\n    updateReds(x, res);\n    setBoard(currBoard);\n    /* setTurn ('y') */\n    // console.log(board)\n\n    console.log('%cPion Rouge n °' + x + ' a bougé de ' + y + ' à ' + res, 'color: #E02016');\n    return res;\n  };\n\n  const handleYellowPlay = (x, y, power) => {\n    const currBoard = [...board];\n    const deadPawn = []; // Etat actuel du pion dans la matrice, en aller ou en retour\n\n    const state = currBoard[x][y];\n    let distance = x + power >= 6 ? 6 - x : x + power <= 0 ? 0 - x : power;\n    let i;\n    console.log(x + distance);\n    /*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne/colonne dépend de la valeur de power, si on est en al`ler ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */\n\n    for (i = x; power > 0 ? i <= x + distance : i >= x + distance; power > 0 ? i++ : i--) {\n      // Si un pion Rouge est rencontré, retour à la case départ et incrémentation de la distance\n      if (i < 6 && currBoard[i][y].toLowerCase() === 'r') {\n        distance = power > 0 ? distance + 1 : distance - 1;\n        deadPawn.push(i);\n        currBoard[i][currBoard[i][y] === 'r' ? 0 : 6] = currBoard[i][y];\n        currBoard[i][y] = '+';\n      }\n    }\n\n    const res = power > 0 ? i > 6 ? 6 : i - 1 : i < 0 ? 0 : i + 1;\n    replaceRedPawn(deadPawn);\n    if (res === 6) currBoard[res][y] = 'Y';else currBoard[res][y] = state; // Si un aller-retour complet réalisé, incrémentation du score\n\n    if (res === 0 && power < 0) {\n      const newScore = [...score];\n      newScore[1]++;\n      console.log('%cPion Jaune n°' + y + ' a fait un aller-retour complet ! +1 point pour les Jaunes !', 'color: green');\n      setScore(newScore);\n      return 0;\n    } // Si le pion a quitté une bordure de sa ligne/colonne\n\n\n    console.log(res);\n    if (x === 0 || x === 6) currBoard[x][y] = '|';else currBoard[x][y] = '+';\n    updateYellows(res, y);\n    setBoard(currBoard); // setTurn('r')\n    // console.log(board)\n\n    console.log('%cPion Jaune n°' + y + ' a bougé de ' + x + ' à ' + res, 'color: #DAA25D');\n    return res;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Rouge : \", score[0], \"\\u2003 Jaune : \", score[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"red-row\",\n        children: reds.map(red => /*#__PURE__*/_jsxDEV(PionRouge, {\n          x: red.x,\n          y: red.y,\n          powerGo: red.powerGo,\n          powerReturn: red.powerReturn,\n          handlePlay: handleRedPlay,\n          turn: \"r\"\n        }, red.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"yellow-row\",\n        children: yellows.map(yellow => /*#__PURE__*/_jsxDEV(PionJaune, {\n          x: yellow.x,\n          y: yellow.y,\n          powerGo: yellow.powerGo,\n          powerReturn: yellow.powerReturn,\n          handlePlay: handleYellowPlay,\n          turn: \"y\"\n        }, yellow.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Plateau, \"lX0U3pMH3FGS9yHBbTcRt1gxHiw=\");\n\n_c = Plateau;\nexport default Plateau;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plateau\");","map":{"version":3,"sources":["C:/Users/Administrateur/Desktop/Octogames-Squadro-feat-3-prototype-squadro/root/client/src/components/Plateau.jsx"],"names":["React","useState","PionJaune","PionRouge","Plateau","board","setBoard","yellows","setYellows","id","x","y","powerGo","powerReturn","reds","setReds","score","setScore","replaceRedPawn","list","newReds","forEach","origin","Date","now","replaceYellowPawn","newYellows","updateYellows","updateReds","handleRedPlay","power","currBoard","deadPawn","state","distance","i","toLowerCase","push","res","newScore","console","log","handleYellowPlay","map","red","yellow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport '../style/Plateau.css'\nimport PionJaune from './Pion Jaune'\nimport PionRouge from './Pion Rouge'\nimport { ReactComponent as Board } from '../assets/Plateau.svg'\n\nexport const Plateau = () => {\n  const [board, setBoard] = useState(\n    [['x', 'y', 'y', 'y', 'y', 'y', 'x'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['x', '|', '|', '|', '|', '|', 'x']\n    ]\n  )\n  const [yellows, setYellows] = useState(\n    [\n      { id: 1, x: 0, y: 1, powerGo: 1, powerReturn: -3 },\n      { id: 2, x: 0, y: 2, powerGo: 3, powerReturn: -1 },\n      { id: 3, x: 0, y: 3, powerGo: 2, powerReturn: -2 },\n      { id: 4, x: 0, y: 4, powerGo: 3, powerReturn: -1 },\n      { id: 5, x: 0, y: 5, powerGo: 1, powerReturn: -3 }\n    ]\n  )\n  const [reds, setReds] = useState(\n    [\n      { id: 1, x: 1, y: 0, powerGo: 3, powerReturn: -1 },\n      { id: 2, x: 2, y: 0, powerGo: 1, powerReturn: -3 },\n      { id: 3, x: 3, y: 0, powerGo: 2, powerReturn: -2 },\n      { id: 4, x: 4, y: 0, powerGo: 1, powerReturn: -3 },\n      { id: 5, x: 5, y: 0, powerGo: 3, powerReturn: -1 }\n    ]\n  )\n\n  const [score, setScore] = useState([0, 0])\n  /* const [turn, setTurn] = useState('y') */\n  const replaceRedPawn = (list) => {\n    const newReds = [...reds]\n    list.forEach(x => {\n      const [powerGo, powerReturn, origin] = [newReds[x - 1].powerGo, newReds[x - 1].powerReturn, board[newReds[x - 1].x][0]]\n      delete newReds[x - 1]\n      newReds[x - 1] = { id: Date.now() + x, x: x, y: (origin === 'r' ? 0 : 6), powerGo: powerGo, powerReturn: powerReturn }\n    })\n    setReds(newReds)\n  }\n  const replaceYellowPawn = (list) => {\n    const newYellows = [...yellows]\n    list.forEach(y => {\n      const [powerGo, powerReturn, origin] = [newYellows[y - 1].powerGo, newYellows[y - 1].powerReturn, board[0][newYellows[y - 1].y]]\n      delete newYellows[y - 1]\n      newYellows[y - 1] = { id: Date.now() + y, x: (origin === 'y' ? 0 : 6), y: y, powerGo: powerGo, powerReturn: powerReturn }\n    })\n    setYellows(newYellows)\n  }\n  const updateYellows = (x, y) => {\n    const newYellows = [...yellows]\n    newYellows[y - 1].x = x\n    setYellows(newYellows)\n  }\n  const updateReds = (x, y) => {\n    const newReds = [...reds]\n    newReds[x - 1].y = y\n    setReds(newReds)\n  }\n  const handleRedPlay = (x, y, power) => {\n    const currBoard = [...board]\n    // Liste contenant les pions éliminés lors du tour\n    const deadPawn = []\n    // Etat actuel du pion dans la matrice, en aller ou en retour\n    const state = currBoard[x][y]\n    // On vérifie que le déplacement n'engendre pas un dépassement des limites du plateau\n    let distance = (y + power >= 6 ? 6 - y : (y + power <= 0 ? 0 - y : power))\n    let i\n    /*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne dépend de la valeur de power, si on est en aller ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */\n    for (i = y; (power > 0 ? i <= y + distance : i >= y + distance) ; (power > 0 ? i++ : i--)) {\n      // Si un pion Jaune est rencontré, retour à la case départ et incrémentation de la distance\n      if (i < 6 && currBoard[x][i].toLowerCase() === 'y') {\n        distance = (power > 0 ? distance + 1 : distance - 1)\n        deadPawn.push(i)\n        currBoard[(currBoard[x][i] === 'y' ? 0 : 6)][i] = currBoard[x][i]\n        currBoard[x][i] = '+'\n      }\n    }\n    // Si dépassement imprévu, on replace le pion aux bordures du plateau\n    const res = (power > 0 ? (i > 6 ? 6 : i - 1) : (i < 0 ? 0 : i + 1))\n    replaceYellowPawn(deadPawn)\n    if (res === 6) currBoard[x][res] = 'R'\n    else currBoard[x][res] = state\n    // Si un aller-retour complet réalisé, incrémentation du score\n    if (res === 0 && power < 0) {\n      const newScore = [...score]\n      newScore[0]++\n      console.log('%cPion Rouge n°' + x + ' a fait un aller-retour complet ! +1 point pour les Rouges !', 'color: green')\n      setScore(newScore)\n      return 0\n    }\n    // Si le pion a quitté une bordure de sa ligne/colonne\n    if (y === 0 || y === 6) currBoard[x][y] = '—'\n    else currBoard[x][y] = '+'\n    updateReds(x, res)\n    setBoard(currBoard)\n    /* setTurn ('y') */\n    // console.log(board)\n    console.log('%cPion Rouge n °' + x + ' a bougé de ' + y + ' à ' + res, 'color: #E02016')\n    return res\n  }\n  const handleYellowPlay = (x, y, power) => {\n    const currBoard = [...board]\n    const deadPawn = []\n    // Etat actuel du pion dans la matrice, en aller ou en retour\n    const state = currBoard[x][y]\n    let distance = (x + power >= 6 ? 6 - x : (x + power <= 0 ? 0 - x : power))\n    let i\n    console.log(x + distance)\n    /*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne/colonne dépend de la valeur de power, si on est en al`ler ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */\n    for (i = x; (power > 0 ? i <= x + distance : i >= x + distance); (power > 0 ? i++ : i--)) {\n      // Si un pion Rouge est rencontré, retour à la case départ et incrémentation de la distance\n      if (i < 6 && currBoard[i][y].toLowerCase() === 'r') {\n        distance = (power > 0 ? distance + 1 : distance - 1)\n        deadPawn.push(i)\n        currBoard[i][(currBoard[i][y] === 'r' ? 0 : 6)] = currBoard[i][y]\n        currBoard[i][y] = '+'\n      }\n    }\n    const res = (power > 0 ? (i > 6 ? 6 : i - 1) : (i < 0 ? 0 : i + 1))\n    replaceRedPawn(deadPawn)\n    if (res === 6) currBoard[res][y] = 'Y'\n    else currBoard[res][y] = state\n    // Si un aller-retour complet réalisé, incrémentation du score\n    if (res === 0 && power < 0) {\n      const newScore = [...score]\n      newScore[1]++\n      console.log('%cPion Jaune n°' + y + ' a fait un aller-retour complet ! +1 point pour les Jaunes !', 'color: green')\n      setScore(newScore)\n      return 0\n    }\n    // Si le pion a quitté une bordure de sa ligne/colonne\n    console.log(res)\n    if (x === 0 || x === 6) currBoard[x][y] = '|'\n    else currBoard[x][y] = '+'\n    updateYellows(res, y)\n    setBoard(currBoard)\n    // setTurn('r')\n    // console.log(board)\n    console.log('%cPion Jaune n°' + y + ' a bougé de ' + x + ' à ' + res, 'color: #DAA25D')\n    return res\n  }\n  return (\n    <>\n      <h1>\n        Rouge : {score[0]}\n        &emsp;\n        Jaune : {score[1]}\n      </h1>\n      {/*\n        (turn === 'r' ? <h2 style={{ color: '#E02016' }}> Tour des Rouges</h2> : <h2 style={{ color: '#DAA25D' }}> Tour des Jaunes</h2>)\n      */}\n      <div className='board-wrapper'>\n        <Board />\n        <div className='red-row'>\n          {\n            reds.map(red => (\n              <PionRouge\n                key={red.id}\n                x={red.x}\n                y={red.y}\n                powerGo={red.powerGo}\n                powerReturn={red.powerReturn}\n                handlePlay={handleRedPlay}\n                turn='r'\n              />\n            ))\n          }\n        </div>\n        <div className='yellow-row'>\n          {\n            yellows.map(yellow => (\n              <PionJaune\n                key={yellow.id}\n                x={yellow.x}\n                y={yellow.y}\n                powerGo={yellow.powerGo}\n                powerReturn={yellow.powerReturn}\n                handlePlay={handleYellowPlay}\n                turn='y'\n              />\n            ))\n          }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Plateau\n"]},"metadata":{},"sourceType":"module"}