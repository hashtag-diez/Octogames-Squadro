{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Administrateur/Desktop/Octogames-Squadro-feat-3-prototype-squadro/root/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/Administrateur/Desktop/Octogames-Squadro-feat-3-prototype-squadro/root/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import'../style/Plateau.css';import PionJaune from'./Pion Jaune';import PionRouge from'./Pion Rouge';import{ReactComponent as Board}from\"@svgr/webpack?-svgo,+titleProp,+ref!../assets/Plateau.svg\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var Plateau=function Plateau(){var _useState=useState([['x','y','y','y','y','y','x'],['r','+','+','+','+','+','—'],['r','+','+','+','+','+','—'],['r','+','+','+','+','+','—'],['r','+','+','+','+','+','—'],['r','+','+','+','+','+','—'],['x','|','|','|','|','|','x']]),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];var _useState3=useState([{id:1,x:0,y:1,powerGo:1,powerReturn:-3},{id:2,x:0,y:2,powerGo:3,powerReturn:-1},{id:3,x:0,y:3,powerGo:2,powerReturn:-2},{id:4,x:0,y:4,powerGo:3,powerReturn:-1},{id:5,x:0,y:5,powerGo:1,powerReturn:-3}]),_useState4=_slicedToArray(_useState3,2),yellows=_useState4[0],setYellows=_useState4[1];var _useState5=useState([{id:1,x:1,y:0,powerGo:3,powerReturn:-1},{id:2,x:2,y:0,powerGo:1,powerReturn:-3},{id:3,x:3,y:0,powerGo:2,powerReturn:-2},{id:4,x:4,y:0,powerGo:1,powerReturn:-3},{id:5,x:5,y:0,powerGo:3,powerReturn:-1}]),_useState6=_slicedToArray(_useState5,2),reds=_useState6[0],setReds=_useState6[1];var _useState7=useState([0,0]),_useState8=_slicedToArray(_useState7,2),score=_useState8[0],setScore=_useState8[1];/* const [turn, setTurn] = useState('y') */var replaceRedPawn=function replaceRedPawn(list){var newReds=_toConsumableArray(reds);list.forEach(function(x){var _ref=[newReds[x-1].powerGo,newReds[x-1].powerReturn,board[newReds[x-1].x][0]],powerGo=_ref[0],powerReturn=_ref[1],origin=_ref[2];delete newReds[x-1];newReds[x-1]={id:Date.now()+x,x:x,y:origin==='r'?0:6,powerGo:powerGo,powerReturn:powerReturn};});setReds(newReds);};var replaceYellowPawn=function replaceYellowPawn(list){var newYellows=_toConsumableArray(yellows);list.forEach(function(y){var _ref2=[newYellows[y-1].powerGo,newYellows[y-1].powerReturn,board[0][newYellows[y-1].y]],powerGo=_ref2[0],powerReturn=_ref2[1],origin=_ref2[2];delete newYellows[y-1];newYellows[y-1]={id:Date.now()+y,x:origin==='y'?0:6,y:y,powerGo:powerGo,powerReturn:powerReturn};});setYellows(newYellows);};var updateYellows=function updateYellows(x,y){var newYellows=_toConsumableArray(yellows);newYellows[y-1].x=x;setYellows(newYellows);};var updateReds=function updateReds(x,y){var newReds=_toConsumableArray(reds);newReds[x-1].y=y;setReds(newReds);};var handleRedPlay=function handleRedPlay(x,y,power){var currBoard=_toConsumableArray(board);// Liste contenant les pions éliminés lors du tour\nvar deadPawn=[];// Etat actuel du pion dans la matrice, en aller ou en retour\nvar state=currBoard[x][y];// On vérifie que le déplacement n'engendre pas un dépassement des limites du plateau\nvar distance=y+power>=6?6-y:y+power<=0?0-y:power;var i;/*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne dépend de la valeur de power, si on est en aller ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */for(i=y;power>0?i<=y+distance:i>=y+distance;power>0?i++:i--){// Si un pion Jaune est rencontré, retour à la case départ et incrémentation de la distance\nif(i<6&&currBoard[x][i].toLowerCase()==='y'){distance=power>0?distance+1:distance-1;deadPawn.push(i);currBoard[currBoard[x][i]==='y'?0:6][i]=currBoard[x][i];currBoard[x][i]='+';}}// Si dépassement imprévu, on replace le pion aux bordures du plateau\nvar res=power>0?i>6?6:i-1:i<0?0:i+1;replaceYellowPawn(deadPawn);if(res===6)currBoard[x][res]='R';else currBoard[x][res]=state;// Si un aller-retour complet réalisé, incrémentation du score\nif(res===0&&power<0){var newScore=_toConsumableArray(score);newScore[0]++;console.log('%cPion Rouge n°'+x+' a fait un aller-retour complet ! +1 point pour les Rouges !','color: green');setScore(newScore);return 0;}// Si le pion a quitté une bordure de sa ligne/colonne\nif(y===0||y===6)currBoard[x][y]='—';else currBoard[x][y]='+';updateReds(x,res);setBoard(currBoard);/* setTurn ('y') */ // console.log(board)\nconsole.log('%cPion Rouge n °'+x+' a bougé de '+y+' à '+res,'color: #E02016');return res;};var handleYellowPlay=function handleYellowPlay(x,y,power){var currBoard=_toConsumableArray(board);var deadPawn=[];// Etat actuel du pion dans la matrice, en aller ou en retour\nvar state=currBoard[x][y];var distance=x+power>=6?6-x:x+power<=0?0-x:power;var i;console.log(x+distance);/*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne/colonne dépend de la valeur de power, si on est en aller ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */for(i=x;power>0?i<=x+distance:i>=x+distance;power>0?i++:i--){// Si un pion Rouge est rencontré, retour à la case départ et incrémentation de la distance\nif(i<6&&currBoard[i][y].toLowerCase()==='r'){distance=power>0?distance+1:distance-1;deadPawn.push(i);currBoard[i][currBoard[i][y]==='r'?0:6]=currBoard[i][y];currBoard[i][y]='+';}}var res=power>0?i>6?6:i-1:i<0?0:i+1;replaceRedPawn(deadPawn);if(res===6)currBoard[res][y]='Y';else currBoard[res][y]=state;// Si un aller-retour complet réalisé, incrémentation du score\nif(res===0&&power<0){var newScore=_toConsumableArray(score);newScore[1]++;console.log('%cPion Jaune n°'+y+' a fait un aller-retour complet ! +1 point pour les Jaunes !','color: green');setScore(newScore);return 0;}// Si le pion a quitté une bordure de sa ligne/colonne\nconsole.log(res);if(x===0||x===6)currBoard[x][y]='|';else currBoard[x][y]='+';updateYellows(res,y);setBoard(currBoard);// setTurn('r')\n// console.log(board)\nconsole.log('%cPion Jaune n°'+y+' a bougé de '+x+' à '+res,'color: #DAA25D');return res;};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Rouge : \",score[0],\"\\u2003 Jaune : \",score[1]]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-wrapper\",children:[/*#__PURE__*/_jsx(Board,{}),/*#__PURE__*/_jsx(\"div\",{className:\"red-row\",children:reds.map(function(red){return/*#__PURE__*/_jsx(PionRouge,{x:red.x,y:red.y,powerGo:red.powerGo,powerReturn:red.powerReturn,handlePlay:handleRedPlay,turn:\"r\"},red.id);})}),/*#__PURE__*/_jsx(\"div\",{className:\"yellow-row\",children:yellows.map(function(yellow){return/*#__PURE__*/_jsx(PionJaune,{x:yellow.x,y:yellow.y,powerGo:yellow.powerGo,powerReturn:yellow.powerReturn,handlePlay:handleYellowPlay,turn:\"y\"},yellow.id);})})]})]});};export default Plateau;","map":{"version":3,"sources":["C:/Users/Administrateur/Desktop/Octogames-Squadro-feat-3-prototype-squadro/root/client/src/components/Plateau.jsx"],"names":["React","useState","PionJaune","PionRouge","Plateau","board","setBoard","id","x","y","powerGo","powerReturn","yellows","setYellows","reds","setReds","score","setScore","replaceRedPawn","list","newReds","forEach","origin","Date","now","replaceYellowPawn","newYellows","updateYellows","updateReds","handleRedPlay","power","currBoard","deadPawn","state","distance","i","toLowerCase","push","res","newScore","console","log","handleYellowPlay","map","red","yellow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport '../style/Plateau.css'\nimport PionJaune from './Pion Jaune'\nimport PionRouge from './Pion Rouge'\nimport { ReactComponent as Board } from '../assets/Plateau.svg'\n\nexport const Plateau = () => {\n  const [board, setBoard] = useState(\n    [['x', 'y', 'y', 'y', 'y', 'y', 'x'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['r', '+', '+', '+', '+', '+', '—'],\n      ['x', '|', '|', '|', '|', '|', 'x']\n    ]\n  )\n  const [yellows, setYellows] = useState(\n    [\n      { id: 1, x: 0, y: 1, powerGo: 1, powerReturn: -3 },\n      { id: 2, x: 0, y: 2, powerGo: 3, powerReturn: -1 },\n      { id: 3, x: 0, y: 3, powerGo: 2, powerReturn: -2 },\n      { id: 4, x: 0, y: 4, powerGo: 3, powerReturn: -1 },\n      { id: 5, x: 0, y: 5, powerGo: 1, powerReturn: -3 }\n    ]\n  )\n  const [reds, setReds] = useState(\n    [\n      { id: 1, x: 1, y: 0, powerGo: 3, powerReturn: -1 },\n      { id: 2, x: 2, y: 0, powerGo: 1, powerReturn: -3 },\n      { id: 3, x: 3, y: 0, powerGo: 2, powerReturn: -2 },\n      { id: 4, x: 4, y: 0, powerGo: 1, powerReturn: -3 },\n      { id: 5, x: 5, y: 0, powerGo: 3, powerReturn: -1 }\n    ]\n  )\n\n  const [score, setScore] = useState([0, 0])\n  /* const [turn, setTurn] = useState('y') */\n  const replaceRedPawn = (list) => {\n    const newReds = [...reds]\n    list.forEach(x => {\n      const [powerGo, powerReturn, origin] = [newReds[x - 1].powerGo, newReds[x - 1].powerReturn, board[newReds[x - 1].x][0]]\n      delete newReds[x - 1]\n      newReds[x - 1] = { id: Date.now() + x, x: x, y: (origin === 'r' ? 0 : 6), powerGo: powerGo, powerReturn: powerReturn }\n    })\n    setReds(newReds)\n  }\n  const replaceYellowPawn = (list) => {\n    const newYellows = [...yellows]\n    list.forEach(y => {\n      const [powerGo, powerReturn, origin] = [newYellows[y - 1].powerGo, newYellows[y - 1].powerReturn, board[0][newYellows[y - 1].y]]\n      delete newYellows[y - 1]\n      newYellows[y - 1] = { id: Date.now() + y, x: (origin === 'y' ? 0 : 6), y: y, powerGo: powerGo, powerReturn: powerReturn }\n    })\n    setYellows(newYellows)\n  }\n  const updateYellows = (x, y) => {\n    const newYellows = [...yellows]\n    newYellows[y - 1].x = x\n    setYellows(newYellows)\n  }\n  const updateReds = (x, y) => {\n    const newReds = [...reds]\n    newReds[x - 1].y = y\n    setReds(newReds)\n  }\n  const handleRedPlay = (x, y, power) => {\n    const currBoard = [...board]\n    // Liste contenant les pions éliminés lors du tour\n    const deadPawn = []\n    // Etat actuel du pion dans la matrice, en aller ou en retour\n    const state = currBoard[x][y]\n    // On vérifie que le déplacement n'engendre pas un dépassement des limites du plateau\n    let distance = (y + power >= 6 ? 6 - y : (y + power <= 0 ? 0 - y : power))\n    let i\n    /*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne dépend de la valeur de power, si on est en aller ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */\n    for (i = y; (power > 0 ? i <= y + distance : i >= y + distance) ; (power > 0 ? i++ : i--)) {\n      // Si un pion Jaune est rencontré, retour à la case départ et incrémentation de la distance\n      if (i < 6 && currBoard[x][i].toLowerCase() === 'y') {\n        distance = (power > 0 ? distance + 1 : distance - 1)\n        deadPawn.push(i)\n        currBoard[(currBoard[x][i] === 'y' ? 0 : 6)][i] = currBoard[x][i]\n        currBoard[x][i] = '+'\n      }\n    }\n    // Si dépassement imprévu, on replace le pion aux bordures du plateau\n    const res = (power > 0 ? (i > 6 ? 6 : i - 1) : (i < 0 ? 0 : i + 1))\n    replaceYellowPawn(deadPawn)\n    if (res === 6) currBoard[x][res] = 'R'\n    else currBoard[x][res] = state\n    // Si un aller-retour complet réalisé, incrémentation du score\n    if (res === 0 && power < 0) {\n      const newScore = [...score]\n      newScore[0]++\n      console.log('%cPion Rouge n°' + x + ' a fait un aller-retour complet ! +1 point pour les Rouges !', 'color: green')\n      setScore(newScore)\n      return 0\n    }\n    // Si le pion a quitté une bordure de sa ligne/colonne\n    if (y === 0 || y === 6) currBoard[x][y] = '—'\n    else currBoard[x][y] = '+'\n    updateReds(x, res)\n    setBoard(currBoard)\n    /* setTurn ('y') */\n    // console.log(board)\n    console.log('%cPion Rouge n °' + x + ' a bougé de ' + y + ' à ' + res, 'color: #E02016')\n    return res\n  }\n  const handleYellowPlay = (x, y, power) => {\n    const currBoard = [...board]\n    const deadPawn = []\n    // Etat actuel du pion dans la matrice, en aller ou en retour\n    const state = currBoard[x][y]\n    let distance = (x + power >= 6 ? 6 - x : (x + power <= 0 ? 0 - x : power))\n    let i\n    console.log(x + distance)\n    /*\n      Opérateur condititonnel -> ( condition ? instruction : instruction ), remplace le if/else\n      Le sens de parcours de la ligne/colonne dépend de la valeur de power, si on est en aller ou en retour\n      Les operateurs conditionnels dans la boucle for permet de fixer ce sens de parcours\n      Permet de réduire le code et la répétition des boucles\n    */\n    for (i = x; (power > 0 ? i <= x + distance : i >= x + distance); (power > 0 ? i++ : i--)) {\n      // Si un pion Rouge est rencontré, retour à la case départ et incrémentation de la distance\n      if (i < 6 && currBoard[i][y].toLowerCase() === 'r') {\n        distance = (power > 0 ? distance + 1 : distance - 1)\n        deadPawn.push(i)\n        currBoard[i][(currBoard[i][y] === 'r' ? 0 : 6)] = currBoard[i][y]\n        currBoard[i][y] = '+'\n      }\n    }\n    const res = (power > 0 ? (i > 6 ? 6 : i - 1) : (i < 0 ? 0 : i + 1))\n    replaceRedPawn(deadPawn)\n    if (res === 6) currBoard[res][y] = 'Y'\n    else currBoard[res][y] = state\n    // Si un aller-retour complet réalisé, incrémentation du score\n    if (res === 0 && power < 0) {\n      const newScore = [...score]\n      newScore[1]++\n      console.log('%cPion Jaune n°' + y + ' a fait un aller-retour complet ! +1 point pour les Jaunes !', 'color: green')\n      setScore(newScore)\n      return 0\n    }\n    // Si le pion a quitté une bordure de sa ligne/colonne\n    console.log(res)\n    if (x === 0 || x === 6) currBoard[x][y] = '|'\n    else currBoard[x][y] = '+'\n    updateYellows(res, y)\n    setBoard(currBoard)\n    // setTurn('r')\n    // console.log(board)\n    console.log('%cPion Jaune n°' + y + ' a bougé de ' + x + ' à ' + res, 'color: #DAA25D')\n    return res\n  }\n  return (\n    <>\n      <h1>\n        Rouge : {score[0]}\n        &emsp;\n        Jaune : {score[1]}\n      </h1>\n      {/*\n        (turn === 'r' ? <h2 style={{ color: '#E02016' }}> Tour des Rouges</h2> : <h2 style={{ color: '#DAA25D' }}> Tour des Jaunes</h2>)\n      */}\n      <div className='board-wrapper'>\n        <Board />\n        <div className='red-row'>\n          {\n            reds.map(red => (\n              <PionRouge\n                key={red.id}\n                x={red.x}\n                y={red.y}\n                powerGo={red.powerGo}\n                powerReturn={red.powerReturn}\n                handlePlay={handleRedPlay}\n                turn='r'\n              />\n            ))\n          }\n        </div>\n        <div className='yellow-row'>\n          {\n            yellows.map(yellow => (\n              <PionJaune\n                key={yellow.id}\n                x={yellow.x}\n                y={yellow.y}\n                powerGo={yellow.powerGo}\n                powerReturn={yellow.powerReturn}\n                handlePlay={handleYellowPlay}\n                turn='y'\n              />\n            ))\n          }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Plateau\n"]},"metadata":{},"sourceType":"module"}